#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π DVMH Performance Predictor
"""

import os
import sys
import argparse
import logging
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.utils import setup_logging
from src.model_finetuner import DVMHModelFineTuner


def parse_strategies(strategies_str: str) -> list:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not strategies_str:
        return ['full_model', 'last_layers', 'gradual_unfreezing']
    
    strategies = [s.strip() for s in strategies_str.split(',')]
    valid_strategies = ['full_model', 'last_layers', 'adapter', 'gradual_unfreezing']
    
    for strategy in strategies:
        if strategy not in valid_strategies:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}. "
                           f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_strategies)}")
    
    return strategies


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(
        description="–î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π DVMH Performance Predictor",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ë–∞–∑–æ–≤–æ–µ –¥–æ–æ–±—É—á–µ–Ω–∏–µ:
   python scripts/finetune.py --base-model dvmh_mlp_model --new-data new_programs.csv

2. –î–æ–æ–±—É—á–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
   python scripts/finetune.py --base-model dvmh_attention_model --new-data new_data.csv --test-data test_data.csv

3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
   python scripts/finetune.py --base-model dvmh_mlp_model --new-data new_data.csv --strategies "full_model,last_layers"

4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è:
   python scripts/finetune.py --base-model dvmh_mlp_model --new-data new_data.csv --lr 0.00005 --epochs 100 --batch-size 32

5. –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:
   python scripts/finetune.py --list-models

–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–æ–±—É—á–µ–Ω–∏—è:
  - full_model: –î–æ–æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ–π –º–æ–¥–µ–ª–∏
  - last_layers: –î–æ–æ–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ª–æ–µ–≤
  - adapter: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–µ–≤ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)
  - gradual_unfreezing: –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏–µ —Å–ª–æ–µ–≤
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument(
        '--base-model', '-m',
        help='–ò–º—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .pt)'
    )
    
    parser.add_argument(
        '--model-type',
        choices=['mlp', 'attention'],
        default='mlp',
        help='–¢–∏–ø –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: mlp)'
    )
    
    parser.add_argument(
        '--new-data', '-d',
        help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è'
    )
    
    parser.add_argument(
        '--test-data', '-t',
        help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
    )
    
    parser.add_argument(
        '--target',
        default='target_speedup',
        help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: target_speedup)'
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–æ–±—É—á–µ–Ω–∏—è
    parser.add_argument(
        '--strategies', '-s',
        help='–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: full_model,last_layers,gradual_unfreezing)'
    )
    
    parser.add_argument(
        '--adaptation',
        choices=['extend_preprocessor', 'refit_preprocessor', 'use_existing'],
        default='extend_preprocessor',
        help='–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: extend_preprocessor)'
    )
    
    parser.add_argument(
        '--val-split',
        type=float,
        default=0.2,
        help='–î–æ–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.2)'
    )
    
    # –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument(
        '--lr', '--learning-rate',
        type=float,
        default=0.0001,
        help='–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0001)'
    )
    
    parser.add_argument(
        '--epochs',
        type=int,
        default=50,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)'
    )
    
    parser.add_argument(
        '--batch-size',
        type=int,
        default=64,
        help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 64)'
    )
    
    parser.add_argument(
        '--patience',
        type=int,
        default=10,
        help='–¢–µ—Ä–ø–µ–Ω–∏–µ –¥–ª—è —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)'
    )
    
    parser.add_argument(
        '--weight-decay',
        type=float,
        default=0.01,
        help='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.01)'
    )
    
    # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument(
        '--list-models',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π'
    )
    
    parser.add_argument(
        '--config', '-c',
        default='config/data_config.yaml',
        help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config/data_config.yaml)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (—É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è DEBUG)'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = "DEBUG" if args.verbose else "INFO"
    setup_logging(log_level)
    logger = logging.getLogger(__name__)
    
    logger.info("="*80)
    logger.info("DVMH Model Fine-Tuner - –î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    logger.info("="*80)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fine-tuner
        finetuner = DVMHModelFineTuner(args.config)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        if args.list_models:
            models = finetuner.list_finetuned_models()
            
            if not models:
                print("‚ùå –î–æ–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return 0
            
            print("üìã –°–ø–∏—Å–æ–∫ –¥–æ–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
            print("-" * 100)
            print(f"{'–ò–º—è –º–æ–¥–µ–ª–∏':<40} {'–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å':<20} {'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<15} {'R¬≤':<8} {'–î–∞—Ç–∞'}")
            print("-" * 100)
            
            for model in models:
                name = model['name'][:38] + ".." if len(model['name']) > 40 else model['name']
                base = model['base_model'][:18] + ".." if len(model['base_model']) > 20 else model['base_model']
                strategy = model['strategy'][:13] + ".." if len(model['strategy']) > 15 else model['strategy']
                r2 = f"{model['r2_score']:.4f}" if isinstance(model['r2_score'], (int, float)) else str(model['r2_score'])[:8]
                timestamp = model['timestamp']
                
                print(f"{name:<40} {base:<20} {strategy:<15} {r2:<8} {timestamp}")
            
            print("-" * 100)
            print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π: {finetuner.finetune_dir}")
            return 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if not args.base_model:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --base-model –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
            return 1
        
        if not args.new_data:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --new-data –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞")
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if not os.path.exists(args.new_data):
            print(f"‚ùå –§–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.new_data}")
            return 1
        
        test_df = None
        if args.test_data:
            if not os.path.exists(args.test_data):
                print(f"‚ùå –§–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.test_data}")
                return 1
            
            print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {args.test_data}")
            test_df = pd.read_csv(args.test_data, low_memory=False)
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {test_df.shape}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {args.new_data}")
        new_df = pd.read_csv(args.new_data, low_memory=False)
        print(f"‚úÖ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {new_df.shape}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if args.target not in new_df.columns:
            print(f"‚ùå –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{args.target}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            print(f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(new_df.columns)}")
            return 1
        
        if test_df is not None and args.target not in test_df.columns:
            print(f"‚ùå –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{args.target}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return 1
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        try:
            strategies = parse_strategies(args.strategies)
            print(f"üîß –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–æ–±—É—á–µ–Ω–∏—è: {strategies}")
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö: {str(e)}")
            return 1
        
        # –í—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–æ–±—É—á–µ–Ω–∏—è
        print(f"\n‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–æ–±—É—á–µ–Ω–∏—è:")
        print(f"   ‚Ä¢ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {args.base_model} ({args.model_type})")
        print(f"   ‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {args.adaptation}")
        print(f"   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: {args.val_split * 100:.1f}%")
        print(f"   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {args.lr}")
        print(f"   ‚Ä¢ –≠–ø–æ—Ö–∏: {args.epochs}")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {args.batch_size}")
        print(f"   ‚Ä¢ –¢–µ—Ä–ø–µ–Ω–∏–µ: {args.patience}")
        print(f"   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è: {args.weight_decay}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –¥–æ–æ–±—É—á–µ–Ω–∏–µ
        print(f"\nüöÄ –ù–∞—á–∞–ª–æ –¥–æ–æ–±—É—á–µ–Ω–∏—è...")
        
        results = finetuner.run_comprehensive_fine_tuning(
            new_df=new_df,
            base_model_name=args.base_model,
            model_type=args.model_type,
            target_column=args.target,
            test_df=test_df,
            fine_tune_strategies=strategies,
            validation_split=args.val_split,
            adaptation_strategy=args.adaptation,
            learning_rate=args.lr,
            epochs=args.epochs,
            batch_size=args.batch_size,
            patience=args.patience
        )
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\n" + "="*80)
        print("üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–û–û–ë–£–ß–ï–ù–ò–Ø")
        print("="*80)
        
        if results['best_strategy']:
            print(f"üèÜ –õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {results['best_strategy']}")
            
            best_metrics = results['best_metrics']
            print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏:")
            for metric, value in best_metrics.items():
                print(f"   ‚Ä¢ {metric.upper()}: {value:.4f}")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
            if results['base_model_metrics']:
                base_metrics = results['base_model_metrics']
                print(f"\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é:")
                
                for metric in best_metrics:
                    if metric in base_metrics:
                        base_val = base_metrics[metric]
                        new_val = best_metrics[metric]
                        
                        if metric in ['mse', 'mae', 'rmse']:
                            improvement = ((base_val - new_val) / base_val) * 100
                            symbol = "üìâ" if improvement > 0 else "üìà"
                        else:  # r2
                            improvement = ((new_val - base_val) / base_val) * 100
                            symbol = "üìà" if improvement > 0 else "üìâ"
                        
                        print(f"   {symbol} {metric.upper()}: {base_val:.4f} ‚Üí {new_val:.4f} ({improvement:+.2f}%)")
        
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {finetuner.finetune_dir}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if results['best_strategy']:
            best_model_name = results['strategies_results'][results['best_strategy']]['model_name']
            print(f"   ‚Ä¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏:")
            print(f"     python scripts/predict.py program.f --model {best_model_name} --grid '2,2' --threads 4 --time 1.5")
        
        print(f"   ‚Ä¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
        print(f"     python scripts/finetune.py --list-models")
        
        logger.info("–î–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return 0
        
    except KeyboardInterrupt:
        print("\n‚ùå –î–æ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 130
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        if args.verbose:
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)