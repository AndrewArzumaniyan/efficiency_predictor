#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ DVMH –ø—Ä–æ–≥—Ä–∞–º–º
"""

import os
import sys
import argparse
import logging
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.utils import setup_logging
from src.predictor import DVMHPerformancePredictor


def parse_grid(grid_str: str) -> list:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å —Å–µ—Ç–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    
    Args:
        grid_str: –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1,2,3" –∏–ª–∏ "1*2*3"
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π —Å–µ—Ç–∫–∏
    """
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ ',' –∏ '*'
        if ',' in grid_str:
            grid = [int(x.strip()) for x in grid_str.split(',')]
        elif '*' in grid_str:
            grid = [int(x.strip()) for x in grid_str.split('*')]
        else:
            # –û–¥–Ω–æ —á–∏—Å–ª–æ
            grid = [int(grid_str.strip())]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not all(g > 0 for g in grid):
            raise ValueError("–í—Å–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        
        return grid
    except Exception as e:
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ç–∫–∏ '{grid_str}': {str(e)}")


def validate_input_file(file_path: str) -> str:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        
    Returns:
        str: –¢–∏–ø —Ñ–∞–π–ª–∞ ('fortran' –∏–ª–∏ 'json')
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    file_ext = os.path.splitext(file_path)[1].lower()
    
    if file_ext in ['.f', '.f90', '.for', '.fortran']:
        return 'fortran'
    elif file_ext in ['.json']:
        return 'json'
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_ext}. "
                        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: .f, .f90, .for, .fortran, .json")


def list_available_models(predictor: DVMHPerformancePredictor) -> None:
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    models = predictor.list_available_models()
    
    if not models:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã 'python main.py train'")
        return
    
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for i, model in enumerate(models, 1):
        print(f"  {i}. {model}")
    
    print(f"\nüìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π: {predictor.models_dir}")


def interactive_model_selection(predictor: DVMHPerformancePredictor) -> tuple:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    models = predictor.list_available_models()
    
    if not models:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞")
        return None, None
    
    print("\nüîç –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    for i, model in enumerate(models, 1):
        print(f"  {i}. {model}")
    
    while True:
        try:
            choice = input(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ (1-{len(models)}): ").strip()
            model_idx = int(choice) - 1
            
            if 0 <= model_idx < len(models):
                selected_model = models[model_idx]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
                model_type = 'attention' if 'attention' in selected_model.lower() else 'mlp'
                
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model} (—Ç–∏–ø: {model_type})")
                return selected_model, model_type
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(models)}")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        except KeyboardInterrupt:
            print("\n‚ùå –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω")
            return None, None


def extract_speedup_from_result(result) -> float:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç predict_from_* –º–µ—Ç–æ–¥–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ tuple)
        
    Returns:
        float: –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è
    """
    if isinstance(result, tuple):
        # –î–ª—è attention –º–æ–¥–µ–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è (speedup, attention_weights)
        return result[0]
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ speedup
        return result


def calculate_grid_size(grid: list) -> int:
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    
    Args:
        grid: –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π —Å–µ—Ç–∫–∏
        
    Returns:
        int: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    """
    result = 1
    for dim in grid:
        result *= dim
    return result


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(
        description="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ DVMH –ø—Ä–æ–≥—Ä–∞–º–º",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ Fortran —Ñ–∞–π–ª–∞:
   python scripts/predict.py program.f --grid "2,2" --threads 4 --time 1.5

2. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
   python scripts/predict.py info.json --grid "1*2*3" --threads 8 --time 2.1

3. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:
   python scripts/predict.py --list-models

4. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:
   python scripts/predict.py program.f --grid "2,2" --threads 4 --time 1.5 --interactive

5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏:
   python scripts/predict.py program.f --grid "2,2" --threads 4 --time 1.5 --model dvmh_attention_model --model-type attention

–§–æ—Ä–º–∞—Ç—ã —Å–µ—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤:
  - "2,2" –∏–ª–∏ "2*2" –¥–ª—è –¥–≤—É–º–µ—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ 2x2
  - "1,2,3" –∏–ª–∏ "1*2*3" –¥–ª—è —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ 1x2x3
  - "4" –¥–ª—è –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –∏–∑ 4 –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument(
        'input_file',
        nargs='?',
        help='–ü—É—Ç—å –∫ Fortran —Ñ–∞–π–ª—É (.f, .f90) –∏–ª–∏ JSON —Ñ–∞–π–ª—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (.json)'
    )
    
    parser.add_argument(
        '--grid', '-g',
        help='–°–µ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "x,y,z" –∏–ª–∏ "x*y*z"'
    )
    
    parser.add_argument(
        '--threads', '-t',
        type=int,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏—Ç–µ–π'
    )
    
    parser.add_argument(
        '--time',
        type=float,
        help='–í—Ä–µ–º—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    parser.add_argument(
        '--model', '-m',
        help='–ò–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .pt)'
    )
    
    parser.add_argument(
        '--model-type',
        choices=['mlp', 'attention'],
        default='mlp',
        help='–¢–∏–ø –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: mlp)'
    )
    
    # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument(
        '--list-models',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π'
    )
    
    parser.add_argument(
        '--interactive', '-i',
        action='store_true',
        help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏'
    )
    
    parser.add_argument(
        '--config', '-c',
        default='config/data_config.yaml',
        help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config/data_config.yaml)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (—É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è DEBUG)'
    )
    
    parser.add_argument(
        '--output-format',
        choices=['simple', 'json', 'detailed'],
        default='simple',
        help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: simple)'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = "DEBUG" if args.verbose else "INFO"
    setup_logging(log_level)
    logger = logging.getLogger(__name__)
    
    logger.info("="*60)
    logger.info("DVMH Performance Predictor - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    logger.info("="*60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä
        predictor = DVMHPerformancePredictor(args.config)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        if args.list_models:
            list_available_models(predictor)
            return 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if not args.input_file:
            if args.interactive:
                print("‚ùå –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª")
            else:
                print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª")
                print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø—Ä–∞–≤–∫–∏")
            return 1
        
        if not all([args.grid, args.threads is not None, args.time is not None]):
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: --grid, --threads, --time")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤")
            return 1
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            file_type = validate_input_file(args.input_file)
            print(f"üìÑ –¢–∏–ø —Ñ–∞–π–ª–∞: {file_type}")
        except (FileNotFoundError, ValueError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
            return 1
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å–µ—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        try:
            grid = parse_grid(args.grid)
            print(f"üîß –°–µ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: {grid}")
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ —Å–µ—Ç–∫–∏: {str(e)}")
            return 1
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if args.threads <= 0:
            print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return 1
        
        if args.time <= 0:
            print("‚ùå –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return 1
        
        print(f"‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:")
        print(f"   ‚Ä¢ –ù–∏—Ç–∏: {args.threads}")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è: {args.time} —Å–µ–∫")
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        if args.interactive:
            model_name, model_type = interactive_model_selection(predictor)
            if model_name is None:
                return 1
        else:
            if args.model:
                model_name = args.model
                model_type = args.model_type
            else:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª–∏
                available_models = predictor.list_available_models()
                if not available_models:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                    print("üí° –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã 'python main.py train'")
                    return 1
                
                model_name = available_models[0]
                model_type = 'attention' if 'attention' in model_name.lower() else 'mlp'
                print(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name} (—Ç–∏–ø: {model_type})")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        print(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {model_name}...")
        if not predictor.load_model(model_name, model_type):
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å {model_name}")
            return 1
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
        model_info = predictor.get_model_info(model_name)
        if model_info and args.output_format in ['detailed', 'json']:
            print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
            print(f"   ‚Ä¢ –¢–∏–ø: {model_info['model_type']}")
            print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {model_info['input_dim']}")
            print(f"   ‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {model_info['hidden_dims']}")
            print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {model_info['feature_count']}")
            if 'metrics' in model_info and model_info['metrics']:
                metrics = model_info['metrics']
                if 'r2' in metrics:
                    print(f"   ‚Ä¢ R¬≤ Score: {metrics['r2']:.4f}")
                if 'mae' in metrics:
                    print(f"   ‚Ä¢ MAE: {metrics['mae']:.4f}")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        print(f"üîÆ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
        
        try:
            if file_type == 'fortran':
                result = predictor.predict_from_fortran(
                    args.input_file, grid, args.threads, args.time
                )
            else:  # json
                result = predictor.predict_from_json(
                    args.input_file, grid, args.threads, args.time
                )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")
            if args.verbose:
                logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if result is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
            return 1
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        speedup = extract_speedup_from_result(result)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if args.output_format == 'simple':
            print(f"\nüéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.4f}x")
            
        elif args.output_format == 'json':
            result_data = {
                'input_file': args.input_file,
                'file_type': file_type,
                'grid': grid,
                'threads': args.threads,
                'parallel_time': args.time,
                'predicted_speedup': float(speedup),
                'model_name': model_name,
                'model_type': model_type
            }
            print(json.dumps(result_data, indent=2, ensure_ascii=False))
            
        elif args.output_format == 'detailed':
            print(f"\n" + "="*50)
            print(f"üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø")
            print(f"="*50)
            print(f"üìÑ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.input_file}")
            print(f"üìÇ –¢–∏–ø —Ñ–∞–π–ª–∞: {file_type}")
            print(f"üîß –°–µ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: {grid}")
            print(f"‚öôÔ∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏—Ç–µ–π: {args.threads}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {args.time} —Å–µ–∫")
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model_name} ({model_type})")
            print(f"üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.4f}x")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            if args.time > 0:
                estimated_sequential_time = args.time * speedup
                grid_size = calculate_grid_size(grid)
                total_processors = args.threads * grid_size
                efficiency = speedup / total_processors if total_processors > 0 else 0
                
                print(f"üìà –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_sequential_time:.4f} —Å–µ–∫")
                print(f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏: {efficiency:.4f}")
                print(f"üñ•Ô∏è  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: {total_processors}")
            
            print(f"="*50)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        grid_size = calculate_grid_size(grid)
        total_processors = args.threads * grid_size
        
        if speedup < 1.0:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 1.0")
            print(f"   –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—é")
        elif speedup > total_processors * 1.5:  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–∑—É–º–Ω–æ–µ —Å—É–ø–µ—Ä–ª–∏–Ω–µ–π–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ ({speedup:.2f}x > {total_processors * 1.5:.1f}x)")
            print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        elif speedup > total_processors:
            print(f"‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –°—É–ø–µ—Ä–ª–∏–Ω–µ–π–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ ({speedup:.2f}x > {total_processors}x)")
            print(f"   –≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ñ—Ñ–µ–∫—Ç–∞–º –∫—ç—à–∞ –∏ –ª—É—á—à–µ–π —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏")
        else:
            efficiency = speedup / total_processors
            if efficiency > 0.8:
                print(f"‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏ ({efficiency:.1%})")
            elif efficiency > 0.6:
                print(f"‚úÖ –•–æ—Ä–æ—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏ ({efficiency:.1%})")
            else:
                print(f"‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏ ({efficiency:.1%})")
        
        logger.info("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        logger.info("="*60)
        
        return 0
        
    except KeyboardInterrupt:
        print("\n‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 130
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        if args.verbose:
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)