#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ DVMH –ø—Ä–æ–≥—Ä–∞–º–º
"""

import os
import sys
import argparse
import logging
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.utils import setup_logging
from src.model_trainer import DVMHModelTrainer


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—É—á–µ–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(
        description="–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ DVMH –ø—Ä–æ–≥—Ä–∞–º–º",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python scripts/train.py --dataset data/processed/feature_dataset.csv
  python scripts/train.py --dataset dataset.csv --target target_speedup --epochs 150
  python scripts/train.py --dataset dataset.csv --test-programs 5 --hidden-dims 512 256 128
        """
    )
    
    parser.add_argument(
        '--dataset', '-d',
        required=True,
        help='–ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (CSV —Ñ–∞–π–ª)'
    )
    
    parser.add_argument(
        '--config', '-c',
        default='config/data_config.yaml',
        help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config/data_config.yaml)'
    )
    
    parser.add_argument(
        '--target', '-t',
        default='target_speedup',
        help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: target_speedup)'
    )
    
    parser.add_argument(
        '--test-programs',
        type=int,
        default=3,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)'
    )
    
    parser.add_argument(
        '--val-size',
        type=float,
        default=0.2,
        help='–î–æ–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.2)'
    )
    
    parser.add_argument(
        '--hidden-dims',
        nargs='+',
        type=int,
        default=[256, 128, 64],
        help='–†–∞–∑–º–µ—Ä—ã —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ–µ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 256 128 64)'
    )
    
    parser.add_argument(
        '--attention-dim',
        type=int,
        default=64,
        help='–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å–ª–æ—è –≤–Ω–∏–º–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 64)'
    )
    
    parser.add_argument(
        '--epochs',
        type=int,
        default=100,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)'
    )
    
    parser.add_argument(
        '--batch-size',
        type=int,
        default=128,
        help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 128)'
    )
    
    parser.add_argument(
        '--learning-rate',
        type=float,
        default=0.001,
        help='–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.001)'
    )
    
    parser.add_argument(
        '--patience',
        type=int,
        default=10,
        help='–¢–µ—Ä–ø–µ–Ω–∏–µ –¥–ª—è —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (—É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è DEBUG)'
    )
    
    parser.add_argument(
        '--seed',
        type=int,
        default=42,
        help='–°–ª—É—á–∞–π–Ω–æ–µ —Å–µ–º—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 42)'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = "DEBUG" if args.verbose else "INFO"
    setup_logging(log_level)
    logger = logging.getLogger(__name__)
    
    logger.info("="*60)
    logger.info("–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π DVMH Performance Predictor")
    logger.info(f"–î–∞—Ç–∞—Å–µ—Ç: {args.dataset}")
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {args.config}")
    logger.info("="*60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if not os.path.exists(args.dataset):
            logger.error(f"–î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.dataset}")
            return 1
        
        if not os.path.exists(args.config):
            logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.config}")
            logger.info("–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–º—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        import random
        import numpy as np
        import torch
        
        random.seed(args.seed)
        np.random.seed(args.seed)
        torch.manual_seed(args.seed)
        if torch.cuda.is_available():
            torch.cuda.manual_seed(args.seed)
            torch.cuda.manual_seed_all(args.seed)
        
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–µ–º—è: {args.seed}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
        try:
            df = pd.read_csv(args.dataset, low_memory=False)
            logger.info(f"–î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–∞: {str(e)}")
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if args.target not in df.columns:
            logger.error(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{args.target}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ")
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º
        if 'program_name' not in df.columns:
            logger.error("–°—Ç–æ–ª–±–µ—Ü 'program_name' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ")
            return 1
        
        unique_programs = df['program_name'].nunique()
        if unique_programs < args.test_programs:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. "
                        f"–î–æ—Å—Ç—É–ø–Ω–æ: {unique_programs}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {args.test_programs}")
            return 1
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–µ—Ä
        trainer = DVMHModelTrainer(args.config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        logger.info("–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π...")
        
        results = trainer.run_full_training(
            df=df,
            target_column=args.target,
            test_programs_count=args.test_programs,
            val_size=args.val_size,
            hidden_dims=args.hidden_dims,
            attention_dim=args.attention_dim,
            epochs=args.epochs,
            batch_size=args.batch_size,
            learning_rate=args.learning_rate,
            patience=args.patience
        )
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("="*60)
        logger.info("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        logger.info("="*60)
        
        logger.info("–†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
        for key, value in results['data_info'].items():
            logger.info(f"  {key}: {value}")
        
        logger.info(f"\n–¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {results['test_programs']}")
        
        logger.info("\n–ú–µ—Ç—Ä–∏–∫–∏ MLP –º–æ–¥–µ–ª–∏:")
        for metric, value in results['mlp_metrics'].items():
            logger.info(f"  {metric}: {value:.4f}")
        
        logger.info("\n–ú–µ—Ç—Ä–∏–∫–∏ Attention –º–æ–¥–µ–ª–∏:")
        for metric, value in results['attention_metrics'].items():
            logger.info(f"  {metric}: {value:.4f}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        mlp_r2 = results['mlp_metrics']['r2']
        attention_r2 = results['attention_metrics']['r2']
        
        if attention_r2 > mlp_r2:
            improvement = ((attention_r2 - mlp_r2) / mlp_r2) * 100
            logger.info(f"\nüéØ –ú–æ–¥–µ–ª—å —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –ø–æ–∫–∞–∑–∞–ª–∞ –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
            logger.info(f"   –£–ª—É—á—à–µ–Ω–∏–µ R¬≤: {improvement:.2f}%")
        elif mlp_r2 > attention_r2:
            logger.info(f"\nüéØ MLP –º–æ–¥–µ–ª—å –ø–æ–∫–∞–∑–∞–ª–∞ –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        else:
            logger.info(f"\nüéØ –û–±–µ –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        logger.info(f"\n–ú–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {trainer.models_dir}")
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {os.path.join(trainer.models_dir, 'results')}")
        
        logger.info("="*60)
        logger.info("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("="*60)
        
        return 0
        
    except KeyboardInterrupt:
        logger.info("–û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 130
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        if args.verbose:
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)